rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
             exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
             get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    function isValidDocumentFile() {
      return request.resource.contentType.matches('application/pdf') &&
             request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }

    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && isValidImageFile();
      allow delete: if isOwner(userId) || isAdmin();
    }

    // Meeting documents and attachments
    match /meetings/{meetingId}/documents/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() && isValidDocumentFile();
      allow delete: if isAdmin();
    }

    // Payment receipts and documents
    match /payments/{paymentId}/receipts/{fileName} {
      allow read: if isAuthenticated() && 
                     (isOwner(resource.metadata.userId) || isAdmin());
      allow write: if isAdmin() && isValidDocumentFile();
      allow delete: if isAdmin();
    }

    // Common area images
    match /common_areas/{areaId}/images/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() && isValidImageFile();
      allow delete: if isAdmin();
    }

    // System backups (admin only)
    match /backups/{fileName} {
      allow read, write: if isAdmin();
    }
  }
}
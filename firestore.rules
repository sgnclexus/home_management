rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      // Users can read and update their own profile
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Admins can read and write all user documents
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Vigilance can read user documents
      allow read: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'vigilance'];
    }

    // Payments collection
    match /payments/{paymentId} {
      // Users can read their own payments
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'vigilance']);
      // Users can create payments for themselves
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Admins can read and write all payments
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Users can update their own payment status (for processing)
      allow update: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'vigilance']);
    }

    // Reservations collection
    match /reservations/{reservationId} {
      // Users can read their own reservations
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'vigilance']);
      // Users can create reservations for themselves
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Users can update/delete their own reservations
      allow update, delete: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'vigilance']);
      // Admins can read and write all reservations
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Meetings collection
    match /meetings/{meetingId} {
      // All authenticated users can read meetings
      allow read: if request.auth != null;
      // Only admins can create, update, and delete meetings
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      // Users can update their own notifications (mark as read)
      allow update: if request.auth != null && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'updatedAt']);
      // Admins can create notifications
      allow create: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Areas collection (for reservations)
    match /areas/{areaId} {
      // All authenticated users can read areas
      allow read: if request.auth != null;
      // Only admins can create, update, and delete areas
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Votes collection (for meetings)
    match /votes/{voteId} {
      // All authenticated users can read votes
      allow read: if request.auth != null;
      // Users can create votes (cast their vote)
      allow create: if request.auth != null;
      // Only admins can update and delete votes
      allow update, delete: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Agreements collection (for meetings)
    match /agreements/{agreementId} {
      // All authenticated users can read agreements
      allow read: if request.auth != null;
      // Only admins can create, update, and delete agreements
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
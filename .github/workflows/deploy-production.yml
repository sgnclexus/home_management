name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - frontend
          - backend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Run unit tests
        run: npm run test:ci
        
      - name: Run integration tests
        run: npm run test:integration
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID_TEST }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL_TEST }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY_TEST }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run security audit
        run: npm audit --audit-level=high
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' && (github.event.inputs.component == 'all' || github.event.inputs.component == 'backend' || github.event.inputs.component == '')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup Firebase CLI
        run: npm install -g firebase-tools
        
      - name: Authenticate with Firebase
        run: echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" | base64 -d > firebase-service-account.json
        
      - name: Set Firebase project
        run: firebase use ${{ secrets.FIREBASE_PROJECT_ID_PROD }} --token "${{ secrets.FIREBASE_TOKEN }}"
        
      - name: Deploy Firestore rules and indexes
        run: firebase deploy --only firestore:rules,firestore:indexes --token "${{ secrets.FIREBASE_TOKEN }}"
        
      - name: Deploy Storage rules
        run: firebase deploy --only storage --token "${{ secrets.FIREBASE_TOKEN }}"
        
      - name: Build backend
        run: |
          cd apps/server
          npm ci
          npm run build
          
      - name: Deploy Functions
        run: firebase deploy --only functions --token "${{ secrets.FIREBASE_TOKEN }}"
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID_PROD }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL_PROD }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY_PROD }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY_PROD }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET_PROD }}
          PAYPAL_CLIENT_ID: ${{ secrets.PAYPAL_CLIENT_ID_PROD }}
          PAYPAL_CLIENT_SECRET: ${{ secrets.PAYPAL_CLIENT_SECRET_PROD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET_PROD }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY_PROD }}
          FCM_SERVER_KEY: ${{ secrets.FCM_SERVER_KEY_PROD }}
          VAPID_PRIVATE_KEY: ${{ secrets.VAPID_PRIVATE_KEY_PROD }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN_PROD }}
          
      - name: Backend health check
        run: |
          sleep 30
          curl -f "https://us-central1-${{ secrets.FIREBASE_PROJECT_ID_PROD }}.cloudfunctions.net/api/health"

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [test, security-scan, deploy-backend]
    if: always() && (needs.test.result == 'success' && needs.security-scan.result == 'success') && (github.event.inputs.component == 'all' || github.event.inputs.component == 'frontend' || github.event.inputs.component == '')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          cd apps/client
          npm ci
          
      - name: Build frontend
        run: |
          cd apps/client
          npm run build
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY_PROD }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN_PROD }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID_PROD }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET_PROD }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID_PROD }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID_PROD }}
          NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID_PROD }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL_PROD }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY_PROD }}
          NEXT_PUBLIC_VAPID_PUBLIC_KEY: ${{ secrets.NEXT_PUBLIC_VAPID_PUBLIC_KEY_PROD }}
          
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: apps/client
          
      - name: Frontend health check
        run: |
          sleep 15
          curl -f "${{ secrets.PRODUCTION_FRONTEND_URL }}"

  post-deployment:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always() && (needs.deploy-backend.result == 'success' || needs.deploy-frontend.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run smoke tests
        run: |
          # Add smoke tests here
          echo "Running smoke tests..."
          
      - name: Update deployment status
        run: |
          echo "Deployment completed at $(date)" >> deployment.log
          
      - name: Notify team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            üöÄ Production deployment completed!
            Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: failure()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Firebase CLI
        run: npm install -g firebase-tools
        
      - name: Rollback backend
        if: needs.deploy-backend.result == 'failure'
        run: |
          echo "Rolling back backend deployment..."
          # Add rollback logic here
          
      - name: Rollback frontend
        if: needs.deploy-frontend.result == 'failure'
        run: |
          echo "Rolling back frontend deployment..."
          # Add rollback logic here
          
      - name: Notify team of rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          channel: '#deployments'
          text: |
            ‚ö†Ô∏è Production deployment failed and rollback initiated!
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}